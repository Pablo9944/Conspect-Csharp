
using BUILDER__строитель_;

class Client
{
    static void Main()
    {
        // Ещё один порождающий паттерн, значительно упрощающий нам создание сложных объектов.
        // Он позволяет создавать объекты пошагово, используя один и тот же код для получения разных представлений объекта. 

        /*Когда он там нужен? 

        Если процесс создания не должен зависеть от составных частей, из которых будет создан объект. А также от связей этих частей между собой.
        Если нам в процессе создания может понадобиться получить различные вариации объекта.
        Представьте, что у вас есть сложный объект. Создавать его придется пошагово, инициализировать множество полей, некоторые из которых являются сложными вложенными объектами.

        Здесь у вас два пути: либо спрятать код инициализации внутри конструктора объекта, получив раздутый многоэтажный код, 
        либо (ещё хуже) создать дефолтный объект в клиентском коде, а потом оттуда ему проставлять все нужные свойства, поля и конфигурацию.

        Давайте посмотрим, как можно было бы обойти проблемы с помощью паттерна Строитель.*/

        #region Описание

        // 1) Допустим, у нас сложный объект, и создаваться он должен в несколько этапов. Создадим общий интерфейс Строителя, который будет содержать методы для нужных нам этапов: interface IBuilder
        // 2) Сам сложный составной объект, который потребуется создавать: class Product
        // 3) Теперь можно добавить конкретную реализацию Строителя (тут уже конкретно будет расписан функционал каждого этапа). class ProductBuilder 
        // 4) Теперь нам нужен класс, который будет скрывать ненужные детали постройки объекта от клиента.Создадим класс BuildManager:
        // 5) И, наконец, используем в клиентском коде: class Client


        #endregion

        // инициализация строителя
        IBuilder builder = new ProductBuilder();

        // Создаем менеджера, который будет рулить процессом
        BuildManager buildManager = new BuildManager(builder);

        //  Стартуем и получаем результат
        buildManager.StartBuildingProcess();
        Product product = builder.GetBuildingResult();
    }
}