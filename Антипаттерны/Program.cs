
class Program
{
    static void Main()
    {
        #region
        /*Теперь переходим к самой интересной части нашего модуля — примерам того, как делать не надо, или антипаттернам.

        Они представляют собой распространенные примеры ошибок при разработке ПО, которые могут допускать программисты всех уровней. Здесь мы рассмотрим основные из них, чтобы в будущем вам было проще замечать и избегать их.

        За уже довольно обширную историю разработки их скопилось немало, и многие вы, наверняка, узнаете.

        По своей природе их условно можно разделить на Архитектурные (Architectural anti-patterns) и Разработческие (Development anti-patterns).*/

        // АРХИТЕКТУРНЫЕ - Это ошибки, возникающие при проектировании систем. Их могут допускать как системные архитекторы, так и разработчики уровня Middle и Middle +.
        // РАЗРАБОТЧЕСКИЕ - Паттерны, которые могут возникнуть у программистов всех уровней непосредственно при написании кода.


        // ЗОЛОТОЙ МОЛОТОК - Как правило, это выражается в постоянном использовании одного и того же типового решения для схожих (и не очень) задач.
        //                   К примеру, программист использует несколько известных паттернов во всех своих задачах, порой умышленно подгоняя решение под соответствие какому-либо шаблону.Тут уже паттерны превращаются в антипаттерны. 

        // ИЗОБРЕТЕНИЕ ВЕЛОСИПЕДА - Очень часто бывает, что программист долго работает над каким-либо решением, а потом, уже потратив достаточно много времени, узнает, что есть готовое.
        // И это в лучшем случае. Часто бывает, что задача уже выполнена, и мы узнаем, что есть более эффективные готовые решения.Как правило, большинство задач в том или ином виде уже решались, и стоит всегда начинать с поиска готового решения.
        // Но тут тоже важно не увлекаться и не скатываться в программирование копипастом, о котором дальше.

        // КОПИПАСТ - Программисты не только бездумно используют готовые библиотеки, не особо вникая в механизм работы, но часто и напрямую используют куски кода, вставляя их без изменения в свой проект.

        // БОЖЕСТВЕННЫЙ ОБЪЕКТ (MASTER OBJECT) - Основой системы служит один монструозный класс, который отвечает за всё и вся. Естественно, он обрастает связями и зависимостям, с ним очень сложно работать и почти невозможно рефакторить.

        // ИЗБЫТОЧНАЯ СЛОЖНОСТЬ - Простые системы всегда стабильнее сложных.Здесь речь идет о нарушении принципа KISS (Keep It Simple, Stupid)

        // СПАГЕТТИ-КОД - Большое количество ветвлений, условий, вложенных циклов, неуместная обработка исключений — всё это делает ваш код похожим на спагетти.
        // В общем случае заслуживает внимания такой неформальный подход: ваш метод должен помещаться на один экран.
        // Если он занимает больше, скорее всего, стоит подумать над тем, чтобы как-то раздробить его, сделать более модульным, часть функционала вынести и так далее. 

        // ЛОДОЧНЫЙ ЯКОРЬ (BOAT ANCHOR) - После рефакторинга, как правило, остается много лишнего не использующегося кода, но мы боимся избавляться от него, так и оставляя в проекте «на всякий случай», в надежде использовать потом
        // При этом впоследствии мы часто не можем разобраться, для чего был нужен этот код. Он не несёт никакой смысловой нагрузки, а только мешает разбираться в работающем коде.  
        // Общее правило: ненужный код нужно сразу же удалять из проекта. Причем делать это только после детального ревью всей системы при участии всей команды проекта.
        // В крайнем случае (при текущей интенсивной разработке) код можно закомментировать, но он никогда не должен попадать в актуальный релиз.

        // ПОТОК ЛАВЫ - «Волшебный» легаси код, который все используют, но никто не знает, как он работает. Иногда такие куски даже соответствующим образом закомментированы:

        // ХАРД-КОД (ЖЕСТКОЕ КОДИРОВАНИЕ) - Добавление данных о среде и окружении в исходный код.Чтобы этого избежать,
        // вам стоит создавать специальные объекты для конфигурации, заполнять их данными из какого-либо одного места (например, конфигурационного файла), а затем перебрасывать в другие части кода.
        // Где надо использовать внедрение зависимостей. Подробнее вы познакомитесь с этим дальше, когда будете изучать .NET Core.

        // СОФТ-КОД (МЯГКОЕ КОДИРОВАНИЕ) - Нездоровое увлечение конфигурацией, стремление динамически настраивать в проекте всё и вся.Некоторые разработчики прямо-таки одержимы попытками сделать полностью настраиваемое окружение.
        // Механизм конфигурации приложения неоправданно усложняется, у нас появляются гигантские куски кода, которые занимаются маппингом и инициализацией конфигурации.

        #endregion
    }
}