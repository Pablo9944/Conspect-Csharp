




using Composite_пример;

class Client
{
    static void Main()
    {
        #region Описание
        //Файловая система — хороший пример древовидной структуры объектов.

        //Она представлена файлами и папками, при этом очевидно, что файл будет самой минимальной структурной единицей
        //и не будет содержать подразделы.
        //При этом со всеми папками(в том числе вложенными) можно работать одинаково.Отличный вариант
        //, чтобы реализовать паттерн Компоновщик.

        //Нам нужен общий интерфейс, описывающий все объекты нашей системы — файлы и папки. Создадим его:

        // 1) abstract class Component

        // 2) Теперь реализуем модель файла — наименьшей единицы нашей древовидной структуры.
        // У файла нет подкомпонентов, поэтому методы Add() и Remove() тут реализованы не будут.
        // class File

        // 3) Модель папки-структуры, которая может содержать дочерние элементы (файлы или подпапки): class Folder

        // 4) Теперь посмотрим на саму реализацию в клиентском коде: class Client
        #endregion

        // Создание корневой папки
        Component rootFolder = new Folder("Root");

        // Создание файла - компонента низшего уровня
        Component myFile = new Composite_пример.File("MyFile.txt");

        // Создание папки с документами
        Folder documentsFolder = new Folder("MyDocuments");

        // Добавляем файл в корневую папки
        rootFolder.Add(myFile);

        // Добавляем подпапку для документов в корневую папку
        rootFolder.Add(documentsFolder);

        // показываем контент корневой папки
        rootFolder.Display();
    }
}