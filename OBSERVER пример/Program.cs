
using OBSERVER_пример;

class Program
{
    static void Main()
    {
        #region Описание
        //Попробуем написать небольшую модель биржевых торгов.
        //Пример сюда подходит очень хорошо, так как в этом случае у нас как раз есть объект наблюдения (курс валюты на бирже) и куча наблюдателей в лице банков и частных брокеров.

        // 1) Начнём с общего интерфейса для наблюдателя. Предусмотрим метод Update() для получения информации: interface IObserver
        // 2) И нам понадобится модель данных, которые наблюдатели могли бы получать с биржи. Пусть это будет курс доллара и евро в рублях: class StockData
        // 3) Определим интерфейс наблюдаемого объекта (он же Publisher, то есть источник информации для наблюдателя):  interface IObservable
        // 4) еперь реализуем наш интерфейс IObservable. Создадим классы Bank и Broker, которые будут наблюдать за котировками.  class Bank  и class Broker
        // 5) При получении обновления через метод Update() наблюдатели будут выполнять определенные действия.
        // Теперь реализуем интерфейс нашего наблюдаемого объекта, на который подпишутся наши наблюдатели. 
        // Этим объектом будет биржа: class Stock 
        #endregion

        Stock stock = new Stock();

        var bank = new Bank(stock);
        var broker = new Broker(stock);

        // имитация торгов
        stock.Market();
        // брокер прекращает наблюдать за торгами
        broker.StopTrade();
        // имитация торгов
        stock.Market();

        /*Ещё раз, как всё работает: 

        Stock реализует интерфейс IObservable (наблюдаемый объект) — валютная биржа, за которой все следят.
        В Stock реализован метод Market() — он представляет сессию торгов, и внутри него вся информация о курсах заключена в объекте StockData.
        После торговой сессии происходит уведомление наблюдателей.
        Наблюдатели (Broker, Bank) реализуют интерфейс IObserver, метод Update() которого принимает некоторый объект (в данном случае StockData) в виде параметра. 
        В Broker также есть дополнительный метод StopTrade(), который позволяет отписаться от уведомлений и перестать быть наблюдателем.
        Это так называемая Push-модель, она довольно часто используется в архитектуре приложений, когда существует некий канал для публикации событий (или шина событий), к которой подключены (или подписаны) потребители информации.

        Альтернативой служит Pull-модель, где наблюдатели сами опрашивают источник получения информации. В нашей ситуации эта система представляется менее эффективной.*/
    }
}