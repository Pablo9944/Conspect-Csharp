
class Program
{
    static void Main()
    {
        /*Порождающие
        Singleton (Одиночка) — для удобного доступа к объектам, которые нужны нам в единственном экземпляре.
        Abstract Factory (Абстрактная фабрика) — для создания семейств связанных объектов без привязки к конкретным классам.
        Factory Method (Фабричный метод) — для удобного создания объектов разных типов в подклассах, реализующих общий интерфейс.
        Prototype (Прототип) — для копирования объектов внутренними средствами, независимо от сложности их реализации.
        Builder (Строитель) — для удобного пошагового создания сложных объектов.


        Структурные
        Adapter (Адаптер) — для организации взаимодействия объектов с несовместимыми интерфейсами.
        Composite (Компоновщик) — для организации группировки множества объектов, которые можно представить в виде древовидной структуры.
        Facade (Фасад) — для организации удобного взаимодействия со сложными системами через простой интерфейс.


        Поведенческие
        Chain Of  Responsibility (Цепочка обязанностей) — для организации последовательной обработки запросов в цепочке.
        State (Состояние) — для организации изменяющегося поведения объектов в системе в зависимости от их состояния.
        Observer (Наблюдатель) — для реализации механизма подписки (publisher-subscriber), при котором подписчики могут следить и реагировать на обновления в наблюдаемом объекте.
        Command (Команда) — для использования объектов в качестве запросов и организации удобного взаимодействия разных частей вашей системы, используя такой транспортный канал.
        Strategy (Стратегия) — для организации удобного переключения вашей системы между несколькими алгоритмами в зависимости от потребностей.
         */
    }
}