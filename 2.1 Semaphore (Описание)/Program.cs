using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace _2._1_Semaphore__Описание_
{
    internal class Program
    {
        // Неважно сколько процессов запущено, к примеру 3 (ехе) , так как 1 семафор (именованный) все запущенные (exe) процессы будут обращатся к именнованному семафору 
        // Поэтому, выполнятся процессы будут по очереди (когда завершится предыдущий процесс).Если не создавать именнованный семафор, то у каждого процесса,
        // будет свой семафор и никто не будет ждать друг друга.
        // Можно сразу запустить несколько потоков (указываем аргументы)
        /*
           Аргументы:
           1. [сколько человек пускать на мост]
              Задаем количество слотов для использования в данный момент 
              (не более максимального клоличества задаваемого вторым аргументом).
           2. [сколько человек выдержит мост - запас прочности]
              Задаем максимальное количество слотов для данного семафора.
           3. [имя моста - Дворцовый мост]
               Имя семафора в операционной системе
        */
        static Semaphore pool;
        static void Main(string[] args)
        {                            // именнованный семафор
            pool = new Semaphore(2, 4,"MySemaphore");
            
            //pool.Release(); // Сброс семафора - разрешить 4  (Можно еще добавить 2 но не больше 4 (согласно условию)
            
            for (int i = 1; i <= 8; i++)
            {
                new Thread(Function).Start(i);
            }

            // Delay
            //Console.ReadKey();
        }
        static void Function(object number)
        {
            pool.WaitOne();
            Console.WriteLine("Поток {0} занял слот семафора.", number);
            Thread.Sleep(2000);
            Console.WriteLine("Поток {0} -----> освободил слот.", number);

            pool.Release();
        }
    }
}
