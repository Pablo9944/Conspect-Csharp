
using BUILDER__пример_реализации_;

class Program
{
    static void Main()
    {
        #region Описание применения

        /*В разработке очень часто бывают ситуации, когда необходимо разбить на этапы и скрыть от клиентского кода процесс создания сложных объектов. 

        К примеру, сейчас очень часто требуется выполнять рассылки (уведомление о регистрации, сообщение о поступлении новых товаров, уведомление о заказе и т.д.). 

        При этом письма должны иметь нормальную разметку и вёрстку, красиво смотреться как в браузере, так и мобильном приложении. 
        В связи с этим сейчас часто используют специальные шаблоны для рассылок, содержащие HTML-разметку, прямо как обычные веб-страницы. 

        Чтобы генерировать письмо на основании шаблона с разметкой, часто пользуются шаблонизаторами, причем они должны работать сразу с несколькими шаблонами под разные типы писем.  

        Давайте подумаем, как можно было бы написать шаблонизатор и генерировать с его помощью текст рассылок, применив паттерн Строитель.

        Наша рассылка будет содержать заголовок, тело, нижний колонтитул или футер (там, как правило, указывают контакты). Все эти элементы будут содержать свою разметку. */

        #endregion

        #region Описание действий

        // 1) Создадим модель классов: class Header class Footer class Body
        // 2) Теперь составим из этих элементов шаблон целого письма:  class Template

        // 3) Шаблонизаторов у нас будет несколько (столько, сколько видов писем нам потребуется).
        // Но сначала создадим для них общий абстрактный класс, который они все будут реализовывать и переопределять в зависимости от специфики:

        // 4) Теперь конкретные шаблонизаторы-строители. Их будет два: для приветственной рассылки после регистрации и для рассылки информации по заказу. class WelcomeTemplateBuilder и class OrderTemplateBuilder

        // 5) Сейчас нам нужен класс-строитель, который и будет скрывать в себе всю логику генерации шаблона, чтобы клиентский код мог им свободно пользоваться. 
        // В нашем приложении это будет движок шаблонизатора, создадим его:  class TemplateEngine

        #endregion

        // создаем движок шаблонизатора
        TemplateEngine templateEngine = new TemplateEngine();

        // создаем шаблонизатор для приветственной рассылки
        TemplateBuilder builder = new WelcomeTemplateBuilder();
        // генерируем  приветственное письо с текстом
        Template greetingsTemplate = templateEngine.GenerateTemplate(builder);
        Console.WriteLine(greetingsTemplate.ToString());


        // переопределяем шаблонизатор для рассылки с номером заказа
        builder = new OrderTemplateBuilder();
        // генерируем  письмо  с номером заказа
        Template orderTemplate = templateEngine.GenerateTemplate(builder);
        Console.WriteLine(orderTemplate.ToString());
    }
}
/// <summary>
/// Заголовок письма
/// </summary>
class Header
{
    public string Text { get; set; }
}


/// <summary>
/// Нижний колонтитул
/// </summary>
class Footer
{
    public string Text { get; set; }
}

/// <summary>
/// Тело письма
/// </summary>
class Body
{
    public string Text { get; set; }
}